//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré à partir d'un modèle.
//
//     Des modifications manuelles apportées à ce fichier peuvent conduire à un comportement inattendu de votre application.
//     Les modifications manuelles apportées à ce fichier sont remplacées si le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ImmoWhat_API.DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ImmoWhatEntities : DbContext
    {
        public ImmoWhatEntities()
            : base("name=ImmoWhatEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }
        public virtual DbSet<AspNetRoles> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaims> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogins> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUsers> AspNetUsers { get; set; }
        public virtual DbSet<BIEN> BIEN { get; set; }
        public virtual DbSet<BIEN_PHOTOS> BIEN_PHOTOS { get; set; }
        public virtual DbSet<BIEN_PIECES> BIEN_PIECES { get; set; }
        public virtual DbSet<COMMUNE> COMMUNE { get; set; }
        public virtual DbSet<COMMUNES_CONTOUR_POINT> COMMUNES_CONTOUR_POINT { get; set; }
        public virtual DbSet<mail> mail { get; set; }
        public virtual DbSet<MEMBRE> MEMBRE { get; set; }
        public virtual DbSet<OPTIONS> OPTIONS { get; set; }
        public virtual DbSet<PIECES> PIECES { get; set; }
        public virtual DbSet<RefCouleur> RefCouleur { get; set; }
        public virtual DbSet<RefCouleurAppart> RefCouleurAppart { get; set; }
        public virtual DbSet<RefCouleurTerrain> RefCouleurTerrain { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<TYPEBIEN> TYPEBIEN { get; set; }
        public virtual DbSet<VAL_PRIX_MOYEN_BIEN> VAL_PRIX_MOYEN_BIEN { get; set; }
        public virtual DbSet<MapsParams> MapsParams { get; set; }
        public virtual DbSet<StatImmo> StatImmo { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int addNewMembre(string mail, string nom, string prenom, string commune, string rue, string numero, string boite, Nullable<System.DateTime> dateDeNaissance, string telephone, string photo)
        {
            var mailParameter = mail != null ?
                new ObjectParameter("mail", mail) :
                new ObjectParameter("mail", typeof(string));
    
            var nomParameter = nom != null ?
                new ObjectParameter("nom", nom) :
                new ObjectParameter("nom", typeof(string));
    
            var prenomParameter = prenom != null ?
                new ObjectParameter("prenom", prenom) :
                new ObjectParameter("prenom", typeof(string));
    
            var communeParameter = commune != null ?
                new ObjectParameter("commune", commune) :
                new ObjectParameter("commune", typeof(string));
    
            var rueParameter = rue != null ?
                new ObjectParameter("rue", rue) :
                new ObjectParameter("rue", typeof(string));
    
            var numeroParameter = numero != null ?
                new ObjectParameter("numero", numero) :
                new ObjectParameter("numero", typeof(string));
    
            var boiteParameter = boite != null ?
                new ObjectParameter("boite", boite) :
                new ObjectParameter("boite", typeof(string));
    
            var dateDeNaissanceParameter = dateDeNaissance.HasValue ?
                new ObjectParameter("dateDeNaissance", dateDeNaissance) :
                new ObjectParameter("dateDeNaissance", typeof(System.DateTime));
    
            var telephoneParameter = telephone != null ?
                new ObjectParameter("telephone", telephone) :
                new ObjectParameter("telephone", typeof(string));
    
            var photoParameter = photo != null ?
                new ObjectParameter("photo", photo) :
                new ObjectParameter("photo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addNewMembre", mailParameter, nomParameter, prenomParameter, communeParameter, rueParameter, numeroParameter, boiteParameter, dateDeNaissanceParameter, telephoneParameter, photoParameter);
        }
    
        public virtual int CommunesToLower()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CommunesToLower");
        }
    
        public virtual ObjectResult<Nullable<int>> GetMyId(string mail)
        {
            var mailParameter = mail != null ?
                new ObjectParameter("mail", mail) :
                new ObjectParameter("mail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetMyId", mailParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetMyIds(string mail)
        {
            var mailParameter = mail != null ?
                new ObjectParameter("mail", mail) :
                new ObjectParameter("mail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetMyIds", mailParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetIdMmbre(string mail)
        {
            var mailParameter = mail != null ?
                new ObjectParameter("mail", mail) :
                new ObjectParameter("mail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetIdMmbre", mailParameter);
        }
    
        public virtual ObjectResult<GetMyProfile_Result> GetMyProfile(string mail)
        {
            var mailParameter = mail != null ?
                new ObjectParameter("mail", mail) :
                new ObjectParameter("mail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMyProfile_Result>("GetMyProfile", mailParameter);
        }
    
        public virtual int GetAveragePrice(Nullable<int> annee, string type, string codePostCommune)
        {
            var anneeParameter = annee.HasValue ?
                new ObjectParameter("annee", annee) :
                new ObjectParameter("annee", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var codePostCommuneParameter = codePostCommune != null ?
                new ObjectParameter("codePostCommune", codePostCommune) :
                new ObjectParameter("codePostCommune", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAveragePrice", anneeParameter, typeParameter, codePostCommuneParameter);
        }
    
        public virtual int GetAveragePrice2(Nullable<int> annee, string type, string codePostCommune)
        {
            var anneeParameter = annee.HasValue ?
                new ObjectParameter("annee", annee) :
                new ObjectParameter("annee", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var codePostCommuneParameter = codePostCommune != null ?
                new ObjectParameter("codePostCommune", codePostCommune) :
                new ObjectParameter("codePostCommune", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAveragePrice2", anneeParameter, typeParameter, codePostCommuneParameter);
        }
    
        public virtual int GetAveragePrice3(Nullable<int> annee, string type, string codePostCommune)
        {
            var anneeParameter = annee.HasValue ?
                new ObjectParameter("annee", annee) :
                new ObjectParameter("annee", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var codePostCommuneParameter = codePostCommune != null ?
                new ObjectParameter("codePostCommune", codePostCommune) :
                new ObjectParameter("codePostCommune", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAveragePrice3", anneeParameter, typeParameter, codePostCommuneParameter);
        }
    
        public virtual int GetAveragePrice5(Nullable<int> annee, string type, string codePostCommune)
        {
            var anneeParameter = annee.HasValue ?
                new ObjectParameter("annee", annee) :
                new ObjectParameter("annee", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var codePostCommuneParameter = codePostCommune != null ?
                new ObjectParameter("codePostCommune", codePostCommune) :
                new ObjectParameter("codePostCommune", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAveragePrice5", anneeParameter, typeParameter, codePostCommuneParameter);
        }
    
        public virtual int ajoutIdCouleursDsMapsParams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ajoutIdCouleursDsMapsParams");
        }
    
        public virtual int insertCodePostInCsvTemplate()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertCodePostInCsvTemplate");
        }
    
        public virtual int insertCodePostInStatImmo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertCodePostInStatImmo");
        }
    
        public virtual int test(Nullable<int> annee, string type, string codePostCommune)
        {
            var anneeParameter = annee.HasValue ?
                new ObjectParameter("annee", annee) :
                new ObjectParameter("annee", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var codePostCommuneParameter = codePostCommune != null ?
                new ObjectParameter("codePostCommune", codePostCommune) :
                new ObjectParameter("codePostCommune", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("test", anneeParameter, typeParameter, codePostCommuneParameter);
        }
    
        public virtual int GetAveragePrices(Nullable<int> annee, string type, string codePostCommune)
        {
            var anneeParameter = annee.HasValue ?
                new ObjectParameter("annee", annee) :
                new ObjectParameter("annee", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var codePostCommuneParameter = codePostCommune != null ?
                new ObjectParameter("codePostCommune", codePostCommune) :
                new ObjectParameter("codePostCommune", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAveragePrices", anneeParameter, typeParameter, codePostCommuneParameter);
        }
    
        public virtual int GetAveragePricess(Nullable<int> annee, string type, string codePostCommune)
        {
            var anneeParameter = annee.HasValue ?
                new ObjectParameter("annee", annee) :
                new ObjectParameter("annee", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var codePostCommuneParameter = codePostCommune != null ?
                new ObjectParameter("codePostCommune", codePostCommune) :
                new ObjectParameter("codePostCommune", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAveragePricess", anneeParameter, typeParameter, codePostCommuneParameter);
        }
    
        [DbFunction("ImmoWhatEntities", "GetAveragePrice0")]
        public virtual IQueryable<GetAveragePrice0_Result> GetAveragePrice0(Nullable<int> annee, string type, string codePostCommune)
        {
            var anneeParameter = annee.HasValue ?
                new ObjectParameter("annee", annee) :
                new ObjectParameter("annee", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var codePostCommuneParameter = codePostCommune != null ?
                new ObjectParameter("codePostCommune", codePostCommune) :
                new ObjectParameter("codePostCommune", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetAveragePrice0_Result>("[ImmoWhatEntities].[GetAveragePrice0](@annee, @type, @codePostCommune)", anneeParameter, typeParameter, codePostCommuneParameter);
        }
    
        public virtual ObjectResult<GetAveragePrice00_Result> GetAveragePrice00(Nullable<int> annee, string type, string codePostCommune)
        {
            var anneeParameter = annee.HasValue ?
                new ObjectParameter("annee", annee) :
                new ObjectParameter("annee", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var codePostCommuneParameter = codePostCommune != null ?
                new ObjectParameter("codePostCommune", codePostCommune) :
                new ObjectParameter("codePostCommune", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAveragePrice00_Result>("GetAveragePrice00", anneeParameter, typeParameter, codePostCommuneParameter);
        }
    
        public virtual ObjectResult<GetAveragePrice1_Result> GetAveragePrice1(Nullable<int> annee, string type, string codePostCommune)
        {
            var anneeParameter = annee.HasValue ?
                new ObjectParameter("annee", annee) :
                new ObjectParameter("annee", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var codePostCommuneParameter = codePostCommune != null ?
                new ObjectParameter("codePostCommune", codePostCommune) :
                new ObjectParameter("codePostCommune", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAveragePrice1_Result>("GetAveragePrice1", anneeParameter, typeParameter, codePostCommuneParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetClassePrice(Nullable<int> annee, string type, string codePostCommune)
        {
            var anneeParameter = annee.HasValue ?
                new ObjectParameter("annee", annee) :
                new ObjectParameter("annee", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var codePostCommuneParameter = codePostCommune != null ?
                new ObjectParameter("codePostCommune", codePostCommune) :
                new ObjectParameter("codePostCommune", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetClassePrice", anneeParameter, typeParameter, codePostCommuneParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetClassePrices(Nullable<int> annee, string type, string codePostCommune)
        {
            var anneeParameter = annee.HasValue ?
                new ObjectParameter("annee", annee) :
                new ObjectParameter("annee", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var codePostCommuneParameter = codePostCommune != null ?
                new ObjectParameter("codePostCommune", codePostCommune) :
                new ObjectParameter("codePostCommune", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetClassePrices", anneeParameter, typeParameter, codePostCommuneParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetClassePrices0(Nullable<int> annee, string type, string codePostCommune)
        {
            var anneeParameter = annee.HasValue ?
                new ObjectParameter("annee", annee) :
                new ObjectParameter("annee", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var codePostCommuneParameter = codePostCommune != null ?
                new ObjectParameter("codePostCommune", codePostCommune) :
                new ObjectParameter("codePostCommune", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetClassePrices0", anneeParameter, typeParameter, codePostCommuneParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetClassePrices00(Nullable<int> annee, string type, string codePostCommune)
        {
            var anneeParameter = annee.HasValue ?
                new ObjectParameter("annee", annee) :
                new ObjectParameter("annee", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var codePostCommuneParameter = codePostCommune != null ?
                new ObjectParameter("codePostCommune", codePostCommune) :
                new ObjectParameter("codePostCommune", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetClassePrices00", anneeParameter, typeParameter, codePostCommuneParameter);
        }
    
        public virtual ObjectResult<GetInfoEvolutionPrices_Result> GetInfoEvolutionPrices(string codePostal)
        {
            var codePostalParameter = codePostal != null ?
                new ObjectParameter("codePostal", codePostal) :
                new ObjectParameter("codePostal", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInfoEvolutionPrices_Result>("GetInfoEvolutionPrices", codePostalParameter);
        }
    
        public virtual ObjectResult<GetTableGraphique_Result> GetTableGraphique(string codePostal)
        {
            var codePostalParameter = codePostal != null ?
                new ObjectParameter("codePostal", codePostal) :
                new ObjectParameter("codePostal", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTableGraphique_Result>("GetTableGraphique", codePostalParameter);
        }
    
        public virtual ObjectResult<GetTableGraphique2_Result> GetTableGraphique2(string codePostal)
        {
            var codePostalParameter = codePostal != null ?
                new ObjectParameter("codePostal", codePostal) :
                new ObjectParameter("codePostal", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTableGraphique2_Result>("GetTableGraphique2", codePostalParameter);
        }
    
        public virtual ObjectResult<GetPriceTable_Result> GetPriceTable(Nullable<int> compareYear, string codePostal)
        {
            var compareYearParameter = compareYear.HasValue ?
                new ObjectParameter("compareYear", compareYear) :
                new ObjectParameter("compareYear", typeof(int));
    
            var codePostalParameter = codePostal != null ?
                new ObjectParameter("codePostal", codePostal) :
                new ObjectParameter("codePostal", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPriceTable_Result>("GetPriceTable", compareYearParameter, codePostalParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetHighestYear()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetHighestYear");
        }
    
        public virtual ObjectResult<GetAverageAndTransactionsTable_Result> GetAverageAndTransactionsTable(Nullable<int> compareYear, string codePostal)
        {
            var compareYearParameter = compareYear.HasValue ?
                new ObjectParameter("compareYear", compareYear) :
                new ObjectParameter("compareYear", typeof(int));
    
            var codePostalParameter = codePostal != null ?
                new ObjectParameter("codePostal", codePostal) :
                new ObjectParameter("codePostal", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAverageAndTransactionsTable_Result>("GetAverageAndTransactionsTable", compareYearParameter, codePostalParameter);
        }
    
        public virtual ObjectResult<GetTableTransactions_Result> GetTableTransactions(Nullable<int> compareYear, string codePostal)
        {
            var compareYearParameter = compareYear.HasValue ?
                new ObjectParameter("compareYear", compareYear) :
                new ObjectParameter("compareYear", typeof(int));
    
            var codePostalParameter = codePostal != null ?
                new ObjectParameter("codePostal", codePostal) :
                new ObjectParameter("codePostal", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTableTransactions_Result>("GetTableTransactions", compareYearParameter, codePostalParameter);
        }
    
        public virtual ObjectResult<GetTableGraphiqueTransactions_Result> GetTableGraphiqueTransactions(string codePostal)
        {
            var codePostalParameter = codePostal != null ?
                new ObjectParameter("codePostal", codePostal) :
                new ObjectParameter("codePostal", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTableGraphiqueTransactions_Result>("GetTableGraphiqueTransactions", codePostalParameter);
        }
    
        public virtual ObjectResult<GetTableGraphiqueTransaction_Result> GetTableGraphiqueTransaction(string codePostal)
        {
            var codePostalParameter = codePostal != null ?
                new ObjectParameter("codePostal", codePostal) :
                new ObjectParameter("codePostal", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTableGraphiqueTransaction_Result>("GetTableGraphiqueTransaction", codePostalParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetMinYear(string codePostal)
        {
            var codePostalParameter = codePostal != null ?
                new ObjectParameter("codePostal", codePostal) :
                new ObjectParameter("codePostal", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetMinYear", codePostalParameter);
        }
    
        public virtual ObjectResult<GetAverageAndTransactionTable_Result> GetAverageAndTransactionTable(Nullable<int> compareYear, string codePostal)
        {
            var compareYearParameter = compareYear.HasValue ?
                new ObjectParameter("compareYear", compareYear) :
                new ObjectParameter("compareYear", typeof(int));
    
            var codePostalParameter = codePostal != null ?
                new ObjectParameter("codePostal", codePostal) :
                new ObjectParameter("codePostal", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAverageAndTransactionTable_Result>("GetAverageAndTransactionTable", compareYearParameter, codePostalParameter);
        }
    
        public virtual ObjectResult<GetMyProfiles_Result> GetMyProfiles(string mail)
        {
            var mailParameter = mail != null ?
                new ObjectParameter("mail", mail) :
                new ObjectParameter("mail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMyProfiles_Result>("GetMyProfiles", mailParameter);
        }
    
        public virtual ObjectResult<GetCommuneContourPoints_Result> GetCommuneContourPoints()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCommuneContourPoints_Result>("GetCommuneContourPoints");
        }
    
        public virtual ObjectResult<Nullable<int>> CheckIfMailExists(string mail)
        {
            var mailParameter = mail != null ?
                new ObjectParameter("mail", mail) :
                new ObjectParameter("mail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CheckIfMailExists", mailParameter);
        }
    
        public virtual int addNewBien(Nullable<int> typeBien, Nullable<int> idMembre, Nullable<int> prixBien, Nullable<int> surfaceHabitable, string commune, string rue, string numero, string boite, Nullable<int> etages, string libelle, Nullable<int> anneeDeConstr, string energie, Nullable<int> nbPhotos, Nullable<int> chambre, Nullable<int> sdb, Nullable<int> dressing, Nullable<int> sam, Nullable<int> salon, Nullable<int> buanderie, Nullable<int> cave, Nullable<int> grenier, Nullable<int> toilette, Nullable<int> veranda, Nullable<int> garage, Nullable<bool> piscine, Nullable<bool> cuisineEqu, Nullable<bool> parking, Nullable<bool> jardin, Nullable<bool> alarme, Nullable<bool> doubleVitr)
        {
            var typeBienParameter = typeBien.HasValue ?
                new ObjectParameter("typeBien", typeBien) :
                new ObjectParameter("typeBien", typeof(int));
    
            var idMembreParameter = idMembre.HasValue ?
                new ObjectParameter("idMembre", idMembre) :
                new ObjectParameter("idMembre", typeof(int));
    
            var prixBienParameter = prixBien.HasValue ?
                new ObjectParameter("prixBien", prixBien) :
                new ObjectParameter("prixBien", typeof(int));
    
            var surfaceHabitableParameter = surfaceHabitable.HasValue ?
                new ObjectParameter("surfaceHabitable", surfaceHabitable) :
                new ObjectParameter("surfaceHabitable", typeof(int));
    
            var communeParameter = commune != null ?
                new ObjectParameter("commune", commune) :
                new ObjectParameter("commune", typeof(string));
    
            var rueParameter = rue != null ?
                new ObjectParameter("rue", rue) :
                new ObjectParameter("rue", typeof(string));
    
            var numeroParameter = numero != null ?
                new ObjectParameter("numero", numero) :
                new ObjectParameter("numero", typeof(string));
    
            var boiteParameter = boite != null ?
                new ObjectParameter("boite", boite) :
                new ObjectParameter("boite", typeof(string));
    
            var etagesParameter = etages.HasValue ?
                new ObjectParameter("etages", etages) :
                new ObjectParameter("etages", typeof(int));
    
            var libelleParameter = libelle != null ?
                new ObjectParameter("libelle", libelle) :
                new ObjectParameter("libelle", typeof(string));
    
            var anneeDeConstrParameter = anneeDeConstr.HasValue ?
                new ObjectParameter("anneeDeConstr", anneeDeConstr) :
                new ObjectParameter("anneeDeConstr", typeof(int));
    
            var energieParameter = energie != null ?
                new ObjectParameter("energie", energie) :
                new ObjectParameter("energie", typeof(string));
    
            var nbPhotosParameter = nbPhotos.HasValue ?
                new ObjectParameter("nbPhotos", nbPhotos) :
                new ObjectParameter("nbPhotos", typeof(int));
    
            var chambreParameter = chambre.HasValue ?
                new ObjectParameter("chambre", chambre) :
                new ObjectParameter("chambre", typeof(int));
    
            var sdbParameter = sdb.HasValue ?
                new ObjectParameter("sdb", sdb) :
                new ObjectParameter("sdb", typeof(int));
    
            var dressingParameter = dressing.HasValue ?
                new ObjectParameter("dressing", dressing) :
                new ObjectParameter("dressing", typeof(int));
    
            var samParameter = sam.HasValue ?
                new ObjectParameter("sam", sam) :
                new ObjectParameter("sam", typeof(int));
    
            var salonParameter = salon.HasValue ?
                new ObjectParameter("salon", salon) :
                new ObjectParameter("salon", typeof(int));
    
            var buanderieParameter = buanderie.HasValue ?
                new ObjectParameter("buanderie", buanderie) :
                new ObjectParameter("buanderie", typeof(int));
    
            var caveParameter = cave.HasValue ?
                new ObjectParameter("cave", cave) :
                new ObjectParameter("cave", typeof(int));
    
            var grenierParameter = grenier.HasValue ?
                new ObjectParameter("grenier", grenier) :
                new ObjectParameter("grenier", typeof(int));
    
            var toiletteParameter = toilette.HasValue ?
                new ObjectParameter("toilette", toilette) :
                new ObjectParameter("toilette", typeof(int));
    
            var verandaParameter = veranda.HasValue ?
                new ObjectParameter("veranda", veranda) :
                new ObjectParameter("veranda", typeof(int));
    
            var garageParameter = garage.HasValue ?
                new ObjectParameter("garage", garage) :
                new ObjectParameter("garage", typeof(int));
    
            var piscineParameter = piscine.HasValue ?
                new ObjectParameter("piscine", piscine) :
                new ObjectParameter("piscine", typeof(bool));
    
            var cuisineEquParameter = cuisineEqu.HasValue ?
                new ObjectParameter("cuisineEqu", cuisineEqu) :
                new ObjectParameter("cuisineEqu", typeof(bool));
    
            var parkingParameter = parking.HasValue ?
                new ObjectParameter("parking", parking) :
                new ObjectParameter("parking", typeof(bool));
    
            var jardinParameter = jardin.HasValue ?
                new ObjectParameter("jardin", jardin) :
                new ObjectParameter("jardin", typeof(bool));
    
            var alarmeParameter = alarme.HasValue ?
                new ObjectParameter("alarme", alarme) :
                new ObjectParameter("alarme", typeof(bool));
    
            var doubleVitrParameter = doubleVitr.HasValue ?
                new ObjectParameter("doubleVitr", doubleVitr) :
                new ObjectParameter("doubleVitr", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addNewBien", typeBienParameter, idMembreParameter, prixBienParameter, surfaceHabitableParameter, communeParameter, rueParameter, numeroParameter, boiteParameter, etagesParameter, libelleParameter, anneeDeConstrParameter, energieParameter, nbPhotosParameter, chambreParameter, sdbParameter, dressingParameter, samParameter, salonParameter, buanderieParameter, caveParameter, grenierParameter, toiletteParameter, verandaParameter, garageParameter, piscineParameter, cuisineEquParameter, parkingParameter, jardinParameter, alarmeParameter, doubleVitrParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetIdBien(string codePostal, string rue, string numero, string boite)
        {
            var codePostalParameter = codePostal != null ?
                new ObjectParameter("codePostal", codePostal) :
                new ObjectParameter("codePostal", typeof(string));
    
            var rueParameter = rue != null ?
                new ObjectParameter("rue", rue) :
                new ObjectParameter("rue", typeof(string));
    
            var numeroParameter = numero != null ?
                new ObjectParameter("numero", numero) :
                new ObjectParameter("numero", typeof(string));
    
            var boiteParameter = boite != null ?
                new ObjectParameter("boite", boite) :
                new ObjectParameter("boite", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetIdBien", codePostalParameter, rueParameter, numeroParameter, boiteParameter);
        }
    
        public virtual int PostNewBien(Nullable<int> typeBien, Nullable<int> idMembre, Nullable<int> prixBien, Nullable<int> surfaceHabitable, string commune, string rue, string numero, string boite, Nullable<int> etages, string libelle, Nullable<int> anneeDeConstr, string energie, Nullable<int> nbPhotos, Nullable<int> chambre, Nullable<int> sdb, Nullable<int> dressing, Nullable<int> sam, Nullable<int> salon, Nullable<int> buanderie, Nullable<int> cave, Nullable<int> grenier, Nullable<int> toilette, Nullable<int> veranda, Nullable<int> garage, Nullable<bool> piscine, Nullable<bool> cuisineEqu, Nullable<bool> parking, Nullable<bool> jardin, Nullable<bool> alarme, Nullable<bool> doubleVitr)
        {
            var typeBienParameter = typeBien.HasValue ?
                new ObjectParameter("typeBien", typeBien) :
                new ObjectParameter("typeBien", typeof(int));
    
            var idMembreParameter = idMembre.HasValue ?
                new ObjectParameter("idMembre", idMembre) :
                new ObjectParameter("idMembre", typeof(int));
    
            var prixBienParameter = prixBien.HasValue ?
                new ObjectParameter("prixBien", prixBien) :
                new ObjectParameter("prixBien", typeof(int));
    
            var surfaceHabitableParameter = surfaceHabitable.HasValue ?
                new ObjectParameter("surfaceHabitable", surfaceHabitable) :
                new ObjectParameter("surfaceHabitable", typeof(int));
    
            var communeParameter = commune != null ?
                new ObjectParameter("commune", commune) :
                new ObjectParameter("commune", typeof(string));
    
            var rueParameter = rue != null ?
                new ObjectParameter("rue", rue) :
                new ObjectParameter("rue", typeof(string));
    
            var numeroParameter = numero != null ?
                new ObjectParameter("numero", numero) :
                new ObjectParameter("numero", typeof(string));
    
            var boiteParameter = boite != null ?
                new ObjectParameter("boite", boite) :
                new ObjectParameter("boite", typeof(string));
    
            var etagesParameter = etages.HasValue ?
                new ObjectParameter("etages", etages) :
                new ObjectParameter("etages", typeof(int));
    
            var libelleParameter = libelle != null ?
                new ObjectParameter("libelle", libelle) :
                new ObjectParameter("libelle", typeof(string));
    
            var anneeDeConstrParameter = anneeDeConstr.HasValue ?
                new ObjectParameter("anneeDeConstr", anneeDeConstr) :
                new ObjectParameter("anneeDeConstr", typeof(int));
    
            var energieParameter = energie != null ?
                new ObjectParameter("energie", energie) :
                new ObjectParameter("energie", typeof(string));
    
            var nbPhotosParameter = nbPhotos.HasValue ?
                new ObjectParameter("nbPhotos", nbPhotos) :
                new ObjectParameter("nbPhotos", typeof(int));
    
            var chambreParameter = chambre.HasValue ?
                new ObjectParameter("chambre", chambre) :
                new ObjectParameter("chambre", typeof(int));
    
            var sdbParameter = sdb.HasValue ?
                new ObjectParameter("sdb", sdb) :
                new ObjectParameter("sdb", typeof(int));
    
            var dressingParameter = dressing.HasValue ?
                new ObjectParameter("dressing", dressing) :
                new ObjectParameter("dressing", typeof(int));
    
            var samParameter = sam.HasValue ?
                new ObjectParameter("sam", sam) :
                new ObjectParameter("sam", typeof(int));
    
            var salonParameter = salon.HasValue ?
                new ObjectParameter("salon", salon) :
                new ObjectParameter("salon", typeof(int));
    
            var buanderieParameter = buanderie.HasValue ?
                new ObjectParameter("buanderie", buanderie) :
                new ObjectParameter("buanderie", typeof(int));
    
            var caveParameter = cave.HasValue ?
                new ObjectParameter("cave", cave) :
                new ObjectParameter("cave", typeof(int));
    
            var grenierParameter = grenier.HasValue ?
                new ObjectParameter("grenier", grenier) :
                new ObjectParameter("grenier", typeof(int));
    
            var toiletteParameter = toilette.HasValue ?
                new ObjectParameter("toilette", toilette) :
                new ObjectParameter("toilette", typeof(int));
    
            var verandaParameter = veranda.HasValue ?
                new ObjectParameter("veranda", veranda) :
                new ObjectParameter("veranda", typeof(int));
    
            var garageParameter = garage.HasValue ?
                new ObjectParameter("garage", garage) :
                new ObjectParameter("garage", typeof(int));
    
            var piscineParameter = piscine.HasValue ?
                new ObjectParameter("piscine", piscine) :
                new ObjectParameter("piscine", typeof(bool));
    
            var cuisineEquParameter = cuisineEqu.HasValue ?
                new ObjectParameter("cuisineEqu", cuisineEqu) :
                new ObjectParameter("cuisineEqu", typeof(bool));
    
            var parkingParameter = parking.HasValue ?
                new ObjectParameter("parking", parking) :
                new ObjectParameter("parking", typeof(bool));
    
            var jardinParameter = jardin.HasValue ?
                new ObjectParameter("jardin", jardin) :
                new ObjectParameter("jardin", typeof(bool));
    
            var alarmeParameter = alarme.HasValue ?
                new ObjectParameter("alarme", alarme) :
                new ObjectParameter("alarme", typeof(bool));
    
            var doubleVitrParameter = doubleVitr.HasValue ?
                new ObjectParameter("doubleVitr", doubleVitr) :
                new ObjectParameter("doubleVitr", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PostNewBien", typeBienParameter, idMembreParameter, prixBienParameter, surfaceHabitableParameter, communeParameter, rueParameter, numeroParameter, boiteParameter, etagesParameter, libelleParameter, anneeDeConstrParameter, energieParameter, nbPhotosParameter, chambreParameter, sdbParameter, dressingParameter, samParameter, salonParameter, buanderieParameter, caveParameter, grenierParameter, toiletteParameter, verandaParameter, garageParameter, piscineParameter, cuisineEquParameter, parkingParameter, jardinParameter, alarmeParameter, doubleVitrParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> CheckIfAdressExists(string codePostal, string rue, string numero, string boite)
        {
            var codePostalParameter = codePostal != null ?
                new ObjectParameter("codePostal", codePostal) :
                new ObjectParameter("codePostal", typeof(string));
    
            var rueParameter = rue != null ?
                new ObjectParameter("rue", rue) :
                new ObjectParameter("rue", typeof(string));
    
            var numeroParameter = numero != null ?
                new ObjectParameter("numero", numero) :
                new ObjectParameter("numero", typeof(string));
    
            var boiteParameter = boite != null ?
                new ObjectParameter("boite", boite) :
                new ObjectParameter("boite", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("CheckIfAdressExists", codePostalParameter, rueParameter, numeroParameter, boiteParameter);
        }
    
        public virtual int PostNewPhotos(Nullable<int> idBien, string lien)
        {
            var idBienParameter = idBien.HasValue ?
                new ObjectParameter("idBien", idBien) :
                new ObjectParameter("idBien", typeof(int));
    
            var lienParameter = lien != null ?
                new ObjectParameter("lien", lien) :
                new ObjectParameter("lien", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PostNewPhotos", idBienParameter, lienParameter);
        }
    
        public virtual ObjectResult<GetListBiensFromCPAndType_Result> GetListBiensFromCPAndType(string codePostal, Nullable<int> type)
        {
            var codePostalParameter = codePostal != null ?
                new ObjectParameter("codePostal", codePostal) :
                new ObjectParameter("codePostal", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListBiensFromCPAndType_Result>("GetListBiensFromCPAndType", codePostalParameter, typeParameter);
        }
    
        public virtual ObjectResult<GetListBiensFromCPAndType1_Result> GetListBiensFromCPAndType1(string codePostal, Nullable<int> type)
        {
            var codePostalParameter = codePostal != null ?
                new ObjectParameter("codePostal", codePostal) :
                new ObjectParameter("codePostal", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListBiensFromCPAndType1_Result>("GetListBiensFromCPAndType1", codePostalParameter, typeParameter);
        }
    
        public virtual ObjectResult<GetListBiensFromCPostAndType_Result> GetListBiensFromCPostAndType(string codePostal, Nullable<int> type)
        {
            var codePostalParameter = codePostal != null ?
                new ObjectParameter("codePostal", codePostal) :
                new ObjectParameter("codePostal", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListBiensFromCPostAndType_Result>("GetListBiensFromCPostAndType", codePostalParameter, typeParameter);
        }
    
        public virtual ObjectResult<voirLeBien_Result> voirLeBien(Nullable<int> idBien)
        {
            var idBienParameter = idBien.HasValue ?
                new ObjectParameter("idBien", idBien) :
                new ObjectParameter("idBien", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<voirLeBien_Result>("voirLeBien", idBienParameter);
        }
    
        public virtual ObjectResult<GetOneBien_Result> GetOneBien(Nullable<int> idBien)
        {
            var idBienParameter = idBien.HasValue ?
                new ObjectParameter("idBien", idBien) :
                new ObjectParameter("idBien", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOneBien_Result>("GetOneBien", idBienParameter);
        }
    
        public virtual int SendAMail(string mailAddress, string sujet, string message, Nullable<int> idProprietaire)
        {
            var mailAddressParameter = mailAddress != null ?
                new ObjectParameter("mailAddress", mailAddress) :
                new ObjectParameter("mailAddress", typeof(string));
    
            var sujetParameter = sujet != null ?
                new ObjectParameter("sujet", sujet) :
                new ObjectParameter("sujet", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("message", message) :
                new ObjectParameter("message", typeof(string));
    
            var idProprietaireParameter = idProprietaire.HasValue ?
                new ObjectParameter("idProprietaire", idProprietaire) :
                new ObjectParameter("idProprietaire", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SendAMail", mailAddressParameter, sujetParameter, messageParameter, idProprietaireParameter);
        }
    
        public virtual int SendMail(Nullable<int> idEmetteur, string mailAddress, string sujet, string message, Nullable<int> idRecepteur)
        {
            var idEmetteurParameter = idEmetteur.HasValue ?
                new ObjectParameter("idEmetteur", idEmetteur) :
                new ObjectParameter("idEmetteur", typeof(int));
    
            var mailAddressParameter = mailAddress != null ?
                new ObjectParameter("mailAddress", mailAddress) :
                new ObjectParameter("mailAddress", typeof(string));
    
            var sujetParameter = sujet != null ?
                new ObjectParameter("sujet", sujet) :
                new ObjectParameter("sujet", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("message", message) :
                new ObjectParameter("message", typeof(string));
    
            var idRecepteurParameter = idRecepteur.HasValue ?
                new ObjectParameter("idRecepteur", idRecepteur) :
                new ObjectParameter("idRecepteur", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SendMail", idEmetteurParameter, mailAddressParameter, sujetParameter, messageParameter, idRecepteurParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetCountOfNewMails(Nullable<int> idProprietaire)
        {
            var idProprietaireParameter = idProprietaire.HasValue ?
                new ObjectParameter("idProprietaire", idProprietaire) :
                new ObjectParameter("idProprietaire", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetCountOfNewMails", idProprietaireParameter);
        }
    
        public virtual ObjectResult<GetListOfMails_Result> GetListOfMails(Nullable<int> idMembre)
        {
            var idMembreParameter = idMembre.HasValue ?
                new ObjectParameter("idMembre", idMembre) :
                new ObjectParameter("idMembre", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListOfMails_Result>("GetListOfMails", idMembreParameter);
        }
    
        public virtual int changeStatutMailToLu(Nullable<int> idMail)
        {
            var idMailParameter = idMail.HasValue ?
                new ObjectParameter("idMail", idMail) :
                new ObjectParameter("idMail", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("changeStatutMailToLu", idMailParameter);
        }
    
        public virtual ObjectResult<GetListOfMails2_Result> GetListOfMails2(Nullable<int> idMembre)
        {
            var idMembreParameter = idMembre.HasValue ?
                new ObjectParameter("idMembre", idMembre) :
                new ObjectParameter("idMembre", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListOfMails2_Result>("GetListOfMails2", idMembreParameter);
        }
    
        public virtual int SendMail2(Nullable<int> idEmetteur, string mailAddress, string sujet, string message, Nullable<int> idRecepteur)
        {
            var idEmetteurParameter = idEmetteur.HasValue ?
                new ObjectParameter("idEmetteur", idEmetteur) :
                new ObjectParameter("idEmetteur", typeof(int));
    
            var mailAddressParameter = mailAddress != null ?
                new ObjectParameter("mailAddress", mailAddress) :
                new ObjectParameter("mailAddress", typeof(string));
    
            var sujetParameter = sujet != null ?
                new ObjectParameter("sujet", sujet) :
                new ObjectParameter("sujet", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("message", message) :
                new ObjectParameter("message", typeof(string));
    
            var idRecepteurParameter = idRecepteur.HasValue ?
                new ObjectParameter("idRecepteur", idRecepteur) :
                new ObjectParameter("idRecepteur", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SendMail2", idEmetteurParameter, mailAddressParameter, sujetParameter, messageParameter, idRecepteurParameter);
        }
    
        public virtual int changeStatutMailToRepondu(Nullable<int> idMail)
        {
            var idMailParameter = idMail.HasValue ?
                new ObjectParameter("idMail", idMail) :
                new ObjectParameter("idMail", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("changeStatutMailToRepondu", idMailParameter);
        }
    
        public virtual int changeStatutMailToDeleted(Nullable<int> idMail)
        {
            var idMailParameter = idMail.HasValue ?
                new ObjectParameter("idMail", idMail) :
                new ObjectParameter("idMail", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("changeStatutMailToDeleted", idMailParameter);
        }
    
        public virtual ObjectResult<GetMyBiensList_Result> GetMyBiensList(Nullable<int> idMembre)
        {
            var idMembreParameter = idMembre.HasValue ?
                new ObjectParameter("idMembre", idMembre) :
                new ObjectParameter("idMembre", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMyBiensList_Result>("GetMyBiensList", idMembreParameter);
        }
    
        public virtual ObjectResult<GetMyBiensList2_Result> GetMyBiensList2(Nullable<int> idMembre)
        {
            var idMembreParameter = idMembre.HasValue ?
                new ObjectParameter("idMembre", idMembre) :
                new ObjectParameter("idMembre", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMyBiensList2_Result>("GetMyBiensList2", idMembreParameter);
        }
    
        public virtual int DeleteBienByUser(Nullable<int> idBien)
        {
            var idBienParameter = idBien.HasValue ?
                new ObjectParameter("idBien", idBien) :
                new ObjectParameter("idBien", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteBienByUser", idBienParameter);
        }
    }
}
